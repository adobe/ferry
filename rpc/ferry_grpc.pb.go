// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ferry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FerryClient is the client API for Ferry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FerryClient interface {
	GiveTimeOfTheDay(ctx context.Context, in *Time, opts ...grpc.CallOption) (*Time, error)
	StartSession(ctx context.Context, in *Target, opts ...grpc.CallOption) (*SessionResponse, error)
	Export(ctx context.Context, opts ...grpc.CallOption) (Ferry_ExportClient, error)
	EndSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionResponse, error)
	GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Ferry_GetFileClient, error)
}

type ferryClient struct {
	cc grpc.ClientConnInterface
}

func NewFerryClient(cc grpc.ClientConnInterface) FerryClient {
	return &ferryClient{cc}
}

func (c *ferryClient) GiveTimeOfTheDay(ctx context.Context, in *Time, opts ...grpc.CallOption) (*Time, error) {
	out := new(Time)
	err := c.cc.Invoke(ctx, "/ferry.Ferry/GiveTimeOfTheDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ferryClient) StartSession(ctx context.Context, in *Target, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/ferry.Ferry/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ferryClient) Export(ctx context.Context, opts ...grpc.CallOption) (Ferry_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ferry_ServiceDesc.Streams[0], "/ferry.Ferry/Export", opts...)
	if err != nil {
		return nil, err
	}
	x := &ferryExportClient{stream}
	return x, nil
}

type Ferry_ExportClient interface {
	Send(*KeyRequest) error
	CloseAndRecv() (*SessionResponse, error)
	grpc.ClientStream
}

type ferryExportClient struct {
	grpc.ClientStream
}

func (x *ferryExportClient) Send(m *KeyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ferryExportClient) CloseAndRecv() (*SessionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ferryClient) EndSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/ferry.Ferry/EndSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ferryClient) GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Ferry_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ferry_ServiceDesc.Streams[1], "/ferry.Ferry/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &ferryGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ferry_GetFileClient interface {
	Recv() (*FileRequestResponse, error)
	grpc.ClientStream
}

type ferryGetFileClient struct {
	grpc.ClientStream
}

func (x *ferryGetFileClient) Recv() (*FileRequestResponse, error) {
	m := new(FileRequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FerryServer is the server API for Ferry service.
// All implementations must embed UnimplementedFerryServer
// for forward compatibility
type FerryServer interface {
	GiveTimeOfTheDay(context.Context, *Time) (*Time, error)
	StartSession(context.Context, *Target) (*SessionResponse, error)
	Export(Ferry_ExportServer) error
	EndSession(context.Context, *Session) (*SessionResponse, error)
	GetFile(*FileRequest, Ferry_GetFileServer) error
	mustEmbedUnimplementedFerryServer()
}

// UnimplementedFerryServer must be embedded to have forward compatible implementations.
type UnimplementedFerryServer struct {
}

func (UnimplementedFerryServer) GiveTimeOfTheDay(context.Context, *Time) (*Time, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveTimeOfTheDay not implemented")
}
func (UnimplementedFerryServer) StartSession(context.Context, *Target) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedFerryServer) Export(Ferry_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedFerryServer) EndSession(context.Context, *Session) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedFerryServer) GetFile(*FileRequest, Ferry_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFerryServer) mustEmbedUnimplementedFerryServer() {}

// UnsafeFerryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FerryServer will
// result in compilation errors.
type UnsafeFerryServer interface {
	mustEmbedUnimplementedFerryServer()
}

func RegisterFerryServer(s grpc.ServiceRegistrar, srv FerryServer) {
	s.RegisterService(&Ferry_ServiceDesc, srv)
}

func _Ferry_GiveTimeOfTheDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Time)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FerryServer).GiveTimeOfTheDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ferry.Ferry/GiveTimeOfTheDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FerryServer).GiveTimeOfTheDay(ctx, req.(*Time))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ferry_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FerryServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ferry.Ferry/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FerryServer).StartSession(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ferry_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FerryServer).Export(&ferryExportServer{stream})
}

type Ferry_ExportServer interface {
	SendAndClose(*SessionResponse) error
	Recv() (*KeyRequest, error)
	grpc.ServerStream
}

type ferryExportServer struct {
	grpc.ServerStream
}

func (x *ferryExportServer) SendAndClose(m *SessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ferryExportServer) Recv() (*KeyRequest, error) {
	m := new(KeyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ferry_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FerryServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ferry.Ferry/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FerryServer).EndSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ferry_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FerryServer).GetFile(m, &ferryGetFileServer{stream})
}

type Ferry_GetFileServer interface {
	Send(*FileRequestResponse) error
	grpc.ServerStream
}

type ferryGetFileServer struct {
	grpc.ServerStream
}

func (x *ferryGetFileServer) Send(m *FileRequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Ferry_ServiceDesc is the grpc.ServiceDesc for Ferry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ferry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ferry.Ferry",
	HandlerType: (*FerryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiveTimeOfTheDay",
			Handler:    _Ferry_GiveTimeOfTheDay_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _Ferry_StartSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _Ferry_EndSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Export",
			Handler:       _Ferry_Export_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _Ferry_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ferry.proto",
}
